from logger import logger
import time

from runner import Runner

s_time = time.time()

# models ={"WaveCorr", "WaveCorr_Casual", "Equally_weighted"} 
model   = "WaveCorr"  
distance= "HL"   # "KL"
# epochs  = 1
# weightDecay = 1e-3
experiment_id = "01"

mode ='train' 
logger.info(f"\n### start {mode} phase for {model}_{distance}:\n")

runner = Runner(mode, epochs, model, distance, weightDecay, experiment_id)
runner.run()

for mode in ['valid', 'test']:
    runner._init(mode, epochs)
    logger.info(f"\n### start {mode} phase for {model}_{distance}:\n")
    runner.run()

logger.info(f"\n total time: {time.time()-s_time :.2f} seconds.")
logger.info("\n finish.")




 class Optimizer:
    def __init__(self):
        self.model = model
        self.distance = distance 
    
    def objective(self, trial):
        #the parameters to tune
        self.lookback_window = trial.suggest_int('weightDecay', 20, 40, step=5)
        self.epochs = trial.suggest_int('epochs', 1, 5, step=1)

        return agent.reward_risk



    def optimize(self):
        study = optuna.create_study(study_name='study_v0')
        study.optimize(self.objective, n_trials = 4)
        json.dump(study.best_params, open(self.path + "/best_params.json", 'w'))
        print('#####################')
        print('best hyper-paramters:')
        print(f'{study.best_params}')
        self.save_opt_plots(study)



    def save_opt_plots(self, study):
            # create plots of optimization
            fig1 = optuna.visualization.plot_parallel_coordinate(study, params=["net_depth",'lookback_window','epochs'])
            fig2 = optuna.visualization.plot_optimization_history(study)
            fig3 = optuna.visualization.plot_slice(study, params=["net_depth",'lookback_window','epochs'])
            fig4 = optuna.visualization.plot_contour(study, params=["net_depth",'lookback_window','epochs'])
            data= [fig1,fig2,fig3,fig4]

            #save the plots
            with open(self.path + '/optresult.html', 'w') as f:
                for fig_i in data:
                    f.write(fig_i.to_html(full_html=False, include_plotlyjs='cdn'))